generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(PUBLIC)
  isApproved Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  projects  Project[]        @relation("StaffProjects")
  comments  Comment[]
  editedProjects Project[]   @relation("EditedProjects")
  createdProjects Project[]  @relation("CreatedProjects")

  @@map("users")
}

model Project {
  id                String     @id @default(cuid())
  title             String
  description       String?
  status            String
  budgetedCost      Float
  sourceOfFunds     String
  progress          Int
  department        String
  directorate       String
  contractName      String
  lpoNumber         String
  contractNumber    String
  contractor        String
  contractPeriod    String
  contractStartDate DateTime
  contractEndDate   DateTime
  contractCost      Float
  implementationStatus String
  amountPaidToDate  Float
  recommendations   String
  pmc               String
  lastUpdated       DateTime
  subCounty         String
  ward              String
  images            String[]
  financialYear     String
  latitude          Float?
  longitude         Float?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  // Relations
  staffId           String
  staff             User      @relation("StaffProjects", fields: [staffId], references: [id], onDelete: Cascade)
  comments          Comment[]

  createdById       String
  createdBy         User      @relation("CreatedProjects", fields: [createdById], references: [id], onDelete: SetNull)
  lastEditedById    String
  lastEditedBy      User      @relation("EditedProjects", fields: [lastEditedById], references: [id], onDelete: SetNull)

  @@map("projects")
}

model Comment {
  id        String   @id @default(cuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Self-relation for replies
  parentId  String?  
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")

  userName  String
  timestamp DateTime @default(now())

  @@map("comments")
}

enum Role {
  PUBLIC
  STAFF
  ADMIN
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  REVIEW
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}